generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String    @unique
    password String
    role     UserRole  @default(USER)
    verified DateTime?

    provider   String?
    providerId String?

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    @@unique([email, providerId])
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    items CartItem[]

    token String

    totalAmount Decimal @default(0.00)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    quantity Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

enum UserRole {
    USER
    ADMIN
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name          String
    imageUrl      String[]
    description   Description @relation(fields: [descriptionId], references: [id])
    descriptionId Int

    price         Int
    discount      Int?
    discountPrice Int?

    // Поменять название на isPopular
    popular Boolean? @default(false)

    cartItems CartItem[]

    characteristic   Characteristic @relation(fields: [characteristicId], references: [id])
    characteristicId Int

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    filters  Filter @relation(fields: [filterId], references: [id])
    filterId Int    @unique

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    @@index([popular, discountPrice])
}

model Description {
    id   Int    @id @default(autoincrement())
    text String

    product   Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Characteristic {
    id Int @id @default(autoincrement())

    product Product[]

    lighting    String
    temperature String
    watering    String
    soil        String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Filter {
    id Int @id @default(autoincrement())

    // орхидеи
    numberOfArrows  Int?
    brand           String?
    countryOfOrigin String?

    // цветущие растения
    sort String?

    product Product?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Story {
    id              Int    @id @default(autoincrement())
    previewImageUrl String

    items StoryItem[]

    createdAt DateTime  @default(now())
    deletedAt DateTime?
}

model StoryItem {
    id Int @id @default(autoincrement())

    storyId Int
    story   Story @relation(fields: [storyId], references: [id])

    sourceUrl String

    createdAt DateTime @default(now())
}
